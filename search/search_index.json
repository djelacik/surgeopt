{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SurgeOpt","text":"<p>Real-time courier bonus optimization engine.</p> <p>SurgeOpt is a drop-in microservice that listens to live delivery order and courier data, predicts shortfalls 5\u201315 minutes in advance, calculates the minimum bonus needed for each micro-area, and publishes the new \u20ac/km rates instantly.</p> <p>Key benefits:</p> <ul> <li>\ud83d\ude9a 40% fewer late deliveries (based on simulation)</li> <li>\ud83d\udcb8 10% reduction in total bonus spend for the same SLA</li> <li>\u2699\ufe0f Fully automatic surge pricing \u2014 no spreadsheets, no Slack pings</li> </ul> <p>This site contains the system architecture, API specs, setup instructions, and optimization methods.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<pre><code>flowchart TD\n    Kafka[Kafka Streams] --&gt; ADWIN\n    Kafka --&gt; LightGBM\n    LightGBM --&gt; Optimiser[PuLP Optimiser]\n    ADWIN --&gt; Optimiser\n    Optimiser --&gt; Exposure[FastAPI &amp; Slack Bot]\n</code></pre>"},{"location":"architecture/#components","title":"Components","text":"<ul> <li>Kafka: Streams real-time events (orders, courier locations, weather)</li> <li>ADWIN: Drift detection for sudden demand spikes</li> <li>LightGBM: Nightly-trained 15-minute forecasting model</li> <li>Optimiser: MILP (PuLP + CBC), with greedy fallback if &gt;2s</li> <li>Exposure layer: FastAPI endpoint returns a bonus matrix; Slack bot posts \u20ac/km changes with LLM explanation</li> </ul>"},{"location":"architecture/#optimization-objective","title":"Optimization Objective","text":"<p>We solve:</p> <p>minimize(\u03b1 \u00d7 bonus_cost + \u03b2 \u00d7 late_orders)</p> <p>Subject to: - Area fairness constraints - Budget ceilings</p>"},{"location":"develop/","title":"Developer Guide","text":""},{"location":"develop/#getting-started","title":"Getting Started","text":""},{"location":"develop/#1-clone-the-repo","title":"1. Clone the repo","text":"<pre><code>git clone https://github.com/djelacik/surgeopt.git\ncd surgeopt\n</code></pre>"},{"location":"develop/#2-start-services","title":"2. Start services","text":"<pre><code>docker-compose up --build\n</code></pre> <p>Includes: Kafka, Kafdrop, Postgres, Prometheus, Grafana</p>"},{"location":"develop/#project-structure","title":"Project Structure","text":"<pre><code>surgeopt/\n\u251c\u2500\u2500 src/               \u2190 Python services\n\u251c\u2500\u2500 docker/            \u2190 Container configs\n\u251c\u2500\u2500 notebooks/         \u2190 Forecast exploration\n\u251c\u2500\u2500 tests/             \u2190 pytest test suite\n\u251c\u2500\u2500 docs/              \u2190 MkDocs site\n\u251c\u2500\u2500 .github/workflows/ \u2190 CI/CD pipelines\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"develop/#cicd","title":"CI/CD","text":"<p>GitHub Actions runs: - <code>ruff</code>, <code>black</code>, <code>mypy</code> for code style - <code>pytest</code> for tests - <code>mkdocs gh-deploy</code> to publish docs</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#q-why-not-just-set-static-bonuses","title":"Q: Why not just set static bonuses?","text":"<p>Static bonuses waste money or arrive too late. SurgeOpt reacts in real time to real conditions.</p>"},{"location":"faq/#q-is-this-compatible-with-wolts-or-doordashs-stack","title":"Q: Is this compatible with Wolt's or DoorDash's stack?","text":"<p>Yes. SurgeOpt is designed as a modular microservice. Kafka and HTTP APIs make it drop-in friendly.</p>"},{"location":"faq/#q-can-this-run-on-a-single-laptop","title":"Q: Can this run on a single laptop?","text":"<p>Yes. The simulation version uses Docker Compose and runs fine on a laptop with 8 GB RAM.</p>"},{"location":"faq/#q-can-we-plug-in-real-data","title":"Q: Can we plug in real data?","text":"<p>Absolutely. Replace <code>order_created</code>, <code>courier_loc</code>, and <code>weather_snap</code> topics with live data feeds from your platform.</p>"},{"location":"grafana-troubleshooting/","title":"Grafana Troubleshooting Guide for SurgeOpt","text":""},{"location":"grafana-troubleshooting/#what-just-happened","title":"What Just Happened? \ud83d\udd27","text":"<p>You experienced a common Grafana issue: datasource UID mismatch. Here's exactly what was wrong and how we fixed it:</p>"},{"location":"grafana-troubleshooting/#the-problem","title":"The Problem","text":"<ol> <li>Dashboard Expected: Datasource UID = <code>prometheus</code></li> <li>Grafana Created: Datasource UID = <code>PBFA97CFB590B2093</code></li> <li>Result: Dashboard couldn't find the datasource \u2192 \"No data\"</li> </ol>"},{"location":"grafana-troubleshooting/#the-fix","title":"The Fix","text":"<pre><code># 1. Found the actual datasource UID\ncurl -u admin:admin \"http://localhost:3000/api/datasources\"\n\n# 2. Updated dashboard to use correct UID\nsed -i '' 's/\"uid\": \"prometheus\"/\"uid\": \"PBFA97CFB590B2093\"/g' grafana-import.json\n\n# 3. Re-imported dashboard\ncurl -X POST -u admin:admin -d @grafana-import.json \"http://localhost:3000/api/dashboards/db\"\n</code></pre>"},{"location":"grafana-troubleshooting/#how-grafana-works-explained-simply","title":"How Grafana Works - Explained Simply \ud83d\udcca","text":""},{"location":"grafana-troubleshooting/#1-data-flow","title":"1. Data Flow","text":"<pre><code>Your App \u2192 Metrics Server \u2192 Prometheus \u2192 Grafana \u2192 Dashboard\n    \u2193           \u2193              \u2193          \u2193         \u2193\n  Records    Exposes      Scrapes &amp;   Queries   Displays\n  metrics   /metrics     Stores Data    Data     Charts\n</code></pre>"},{"location":"grafana-troubleshooting/#2-key-components","title":"2. Key Components","text":"<p>Datasources (Where data comes from) - Think of it as \"data connections\" - Our datasource: Prometheus at <code>http://prometheus:9090</code> - Each datasource gets a unique ID (UID)</p> <p>Dashboards (How data is displayed) - Collections of panels (charts, gauges, tables) - Each panel has queries that fetch data from datasources - Panels reference datasources by UID</p> <p>Queries (What data to show) - Written in PromQL (Prometheus Query Language) - Examples:   - <code>surgeopt_orders_per_minute</code> - Current values   - <code>rate(surgeopt_orders_processed_total[5m]) * 60</code> - Rate per minute</p>"},{"location":"grafana-troubleshooting/#3-dashboard-panels-explained","title":"3. Dashboard Panels Explained","text":"<p>Panel 1: Orders Per Minute by Zone - Type: Time series line chart - Query: <code>surgeopt_orders_per_minute</code> - Shows: Real-time order volume for each Helsinki zone</p> <p>Panel 2: Total Order Processing Rate - Type: Gauge (speedometer-like) - Query: <code>sum(rate(surgeopt_orders_processed_total[5m])) * 60</code> - Shows: Overall system throughput</p> <p>Panel 3: Processing Latency - Type: Time series with percentiles - Queries:    - <code>histogram_quantile(0.95, rate(surgeopt_consumer_processing_seconds_bucket[5m]))</code>   - <code>histogram_quantile(0.50, rate(surgeopt_consumer_processing_seconds_bucket[5m]))</code> - Shows: How fast/slow your system is processing orders</p> <p>Panel 4: ADWIN Rolling Mean - Type: Time series - Query: <code>surgeopt_adwin_rolling_mean</code> - Shows: ADWIN algorithm's current state per zone</p>"},{"location":"grafana-troubleshooting/#common-grafana-issues-solutions","title":"Common Grafana Issues &amp; Solutions \ud83d\udee0\ufe0f","text":""},{"location":"grafana-troubleshooting/#issue-no-data-in-panels","title":"Issue: \"No data\" in panels","text":"<p>Causes: 1. \u274c Wrong datasource UID (what we just fixed) 2. \u274c Prometheus not scraping metrics 3. \u274c Metrics server not running 4. \u274c Wrong time range selected</p> <p>Debugging:</p> <pre><code># Check metrics server\ncurl http://localhost:8000/metrics\n\n# Check Prometheus\ncurl \"http://localhost:9090/api/v1/query?query=surgeopt_orders_per_minute\"\n\n# Check Grafana datasources\ncurl -u admin:admin \"http://localhost:3000/api/datasources\"\n</code></pre>"},{"location":"grafana-troubleshooting/#issue-na-values","title":"Issue: \"N/A\" values","text":"<p>Cause: Usually means the query is correct but no recent data Solution: Check if your metrics are being updated</p>"},{"location":"grafana-troubleshooting/#issue-panels-loading-slowly","title":"Issue: Panels loading slowly","text":"<p>Cause: Heavy queries or large time ranges Solution: Reduce time range or optimize queries</p>"},{"location":"grafana-troubleshooting/#understanding-your-current-dashboard","title":"Understanding Your Current Dashboard \ud83d\udcc8","text":""},{"location":"grafana-troubleshooting/#what-you-should-see-now","title":"What You Should See Now:","text":"<ol> <li>Orders Per Minute: Lines showing different zones (Kallio, Kamppi, etc.)</li> <li>Processing Rate: A gauge showing total orders/minute</li> <li>Latency: Two lines (50th and 95th percentile response times)</li> <li>ADWIN Mean: Lines showing algorithm state per zone</li> </ol>"},{"location":"grafana-troubleshooting/#how-to-use-the-dashboard","title":"How to Use the Dashboard:","text":"<p>Time Controls (Top right) - Last 15 minutes: Shows recent data - Refresh 5s: Auto-updates every 5 seconds - Time picker: Click to change time range</p> <p>Panel Interactions - Hover: See exact values at specific times - Zoom: Click and drag to zoom into time ranges - Legend: Click zone names to hide/show lines</p> <p>Refresh Button - Force refresh if data looks stale - Useful when troubleshooting</p>"},{"location":"grafana-troubleshooting/#advanced-grafana-features","title":"Advanced Grafana Features \ud83d\ude80","text":""},{"location":"grafana-troubleshooting/#1-creating-alerts","title":"1. Creating Alerts","text":"<ul> <li>Go to panel \u2192 Edit \u2192 Alert tab</li> <li>Set thresholds (e.g., orders/min &gt; 50)</li> <li>Configure notifications (email, Slack, etc.)</li> </ul>"},{"location":"grafana-troubleshooting/#2-custom-queries","title":"2. Custom Queries","text":"<ul> <li>Click \"Edit\" on any panel</li> <li>Modify PromQL queries</li> <li>Add new metrics from your application</li> </ul>"},{"location":"grafana-troubleshooting/#3-dashboard-variables","title":"3. Dashboard Variables","text":"<ul> <li>Create dropdown filters (e.g., select specific zones)</li> <li>Make dashboards interactive</li> </ul>"},{"location":"grafana-troubleshooting/#4-annotations","title":"4. Annotations","text":"<ul> <li>Mark important events on charts</li> <li>Useful for deployment markers, incidents</li> </ul>"},{"location":"grafana-troubleshooting/#next-steps","title":"Next Steps \ud83c\udfaf","text":"<ol> <li>Explore Data: Try different time ranges, hover over charts</li> <li>Learn PromQL: Practice writing queries in Prometheus UI</li> <li>Customize Panels: Edit panels to show different metrics</li> <li>Set Up Alerts: Configure alerts for critical thresholds</li> <li>Add More Metrics: Extend your application with additional metrics</li> </ol>"},{"location":"grafana-troubleshooting/#quick-reference-commands","title":"Quick Reference Commands \ud83d\udcdd","text":"<pre><code># Start monitoring stack\n./setup_monitoring.sh\n\n# Check all components\ncurl http://localhost:8000/metrics      # Metrics server\ncurl http://localhost:9090/-/ready      # Prometheus health\ncurl http://localhost:3000/api/health   # Grafana health\n\n# View dashboards\nopen http://localhost:3000              # Grafana UI (admin/admin)\nopen http://localhost:9090              # Prometheus UI\n\n# Stop metrics generation\npkill -f start_metrics.py\n</code></pre> <p>Your monitoring system is now fully operational! \ud83c\udf89</p>"},{"location":"monitoring/","title":"SurgeOpt Monitoring System","text":"<p>This document describes the Prometheus and Grafana monitoring setup for the SurgeOpt project.</p>"},{"location":"monitoring/#overview","title":"Overview","text":"<p>The SurgeOpt monitoring system provides comprehensive observability for: - Business Metrics: Orders per minute by zone, drift detection events - Performance Metrics: Processing latency, message throughput - System Health: Consumer uptime, Kafka message rates - ADWIN Algorithm: Rolling means and concept drift detection</p>"},{"location":"monitoring/#quick-start","title":"Quick Start","text":""},{"location":"monitoring/#1-start-the-monitoring-stack","title":"1. Start the Monitoring Stack","text":"<pre><code># Start Prometheus and Grafana\n./setup_monitoring.sh\n</code></pre> <p>This script will: - Start Prometheus (port 9090) and Grafana (port 3000) - Launch a metrics test script to generate sample data - Verify all components are working correctly</p>"},{"location":"monitoring/#2-access-the-dashboards","title":"2. Access the Dashboards","text":"<ul> <li>Grafana: http://localhost:3000 (admin/admin)</li> <li>Prometheus: http://localhost:9090</li> <li>Metrics Endpoint: http://localhost:8000/metrics</li> </ul> <p>The SurgeOpt dashboard will be automatically provisioned in Grafana.</p>"},{"location":"monitoring/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   SurgeOpt      \u2502    \u2502  Prometheus  \u2502    \u2502   Grafana   \u2502\n\u2502   Consumer      \u2502\u2500\u2500\u2500\u25b6\u2502  (Scraper)   \u2502\u2500\u2500\u2500\u25b6\u2502 (Visualizer)\u2502\n\u2502   + Metrics     \u2502    \u2502              \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502\n         \u2502                       \u25bc\n         \u25bc               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502  Alerting    \u2502\n\u2502 HTTP Server     \u2502      \u2502  Rules       \u2502\n\u2502 :8000/metrics   \u2502      \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"monitoring/#metrics-reference","title":"Metrics Reference","text":""},{"location":"monitoring/#business-metrics","title":"Business Metrics","text":"Metric Type Description Labels <code>surgeopt_orders_per_minute</code> Gauge Current orders per minute <code>zone</code> <code>surgeopt_orders_processed_total</code> Counter Total processed orders <code>zone</code>, <code>status</code> <code>surgeopt_adwin_drift_detected_total</code> Counter ADWIN drift detections <code>zone</code>"},{"location":"monitoring/#performance-metrics","title":"Performance Metrics","text":"Metric Type Description Labels <code>surgeopt_consumer_processing_seconds</code> Histogram Message processing time - <code>surgeopt_kafka_messages_total</code> Counter Kafka message count <code>topic</code>, <code>status</code> <code>surgeopt_consumer_uptime_seconds</code> Gauge Consumer uptime -"},{"location":"monitoring/#adwin-algorithm-metrics","title":"ADWIN Algorithm Metrics","text":"Metric Type Description Labels <code>surgeopt_adwin_rolling_mean</code> Gauge Current ADWIN rolling mean <code>zone</code>"},{"location":"monitoring/#dashboard-panels","title":"Dashboard Panels","text":""},{"location":"monitoring/#1-orders-per-minute-by-zone","title":"1. Orders Per Minute by Zone","text":"<ul> <li>Type: Time series</li> <li>Query: <code>surgeopt_orders_per_minute</code></li> <li>Purpose: Track real-time order volume across different zones</li> </ul>"},{"location":"monitoring/#2-total-order-processing-rate","title":"2. Total Order Processing Rate","text":"<ul> <li>Type: Gauge</li> <li>Query: <code>sum(rate(surgeopt_orders_processed_total[5m])) * 60</code></li> <li>Purpose: Monitor overall system throughput</li> </ul>"},{"location":"monitoring/#3-processing-latency","title":"3. Processing Latency","text":"<ul> <li>Type: Time series</li> <li>Queries: </li> <li><code>histogram_quantile(0.95, rate(surgeopt_consumer_processing_seconds_bucket[5m]))</code></li> <li><code>histogram_quantile(0.50, rate(surgeopt_consumer_processing_seconds_bucket[5m]))</code></li> <li>Purpose: Track 50th and 95th percentile latency</li> </ul>"},{"location":"monitoring/#4-adwin-rolling-mean-by-zone","title":"4. ADWIN Rolling Mean by Zone","text":"<ul> <li>Type: Time series</li> <li>Query: <code>surgeopt_adwin_rolling_mean</code></li> <li>Purpose: Monitor ADWIN algorithm state</li> </ul>"},{"location":"monitoring/#5-drift-detection-events","title":"5. Drift Detection Events","text":"<ul> <li>Type: Time series (bars)</li> <li>Query: <code>increase(surgeopt_adwin_drift_detected_total[5m])</code></li> <li>Purpose: Visualize concept drift detection events</li> </ul>"},{"location":"monitoring/#6-consumer-uptime","title":"6. Consumer Uptime","text":"<ul> <li>Type: Gauge</li> <li>Query: <code>surgeopt_consumer_uptime_seconds</code></li> <li>Purpose: Monitor system health</li> </ul>"},{"location":"monitoring/#7-kafka-message-rate","title":"7. Kafka Message Rate","text":"<ul> <li>Type: Time series</li> <li>Query: <code>rate(surgeopt_kafka_messages_total[5m])</code></li> <li>Purpose: Monitor message throughput by topic and status</li> </ul>"},{"location":"monitoring/#alerting-rules","title":"Alerting Rules","text":""},{"location":"monitoring/#critical-alerts","title":"Critical Alerts","text":"<ol> <li>DriftDetected: Fires immediately when concept drift is detected</li> <li>ConsumerDown: Fires if consumer is unreachable for 30+ seconds</li> </ol>"},{"location":"monitoring/#warning-alerts","title":"Warning Alerts","text":"<ol> <li>HighOrderVolume: Orders per minute &gt; 50 for 2+ minutes</li> <li>HighProcessingLatency: 95th percentile &gt; 0.5s for 1+ minute</li> <li>LowOrderProcessingRate: Processing rate &lt; 5 orders/min for 2+ minutes</li> </ol>"},{"location":"monitoring/#integration-with-surgeopt-consumer","title":"Integration with SurgeOpt Consumer","text":"<p>The monitoring is integrated into the SurgeOpt consumer through the <code>SurgeOptMetrics</code> class:</p> <pre><code>from src.metrics.exporter import get_metrics\n\n# Get metrics instance (singleton)\nmetrics = get_metrics()\n\n# Start HTTP server for Prometheus scraping\nmetrics.start_server(port=8000)\n\n# Record metrics in your code\nmetrics.update_orders_per_minute(zone, orders_count)\nmetrics.record_drift_detection(zone)\nmetrics.record_processing_time(duration)\n</code></pre>"},{"location":"monitoring/#key-integration-points","title":"Key Integration Points","text":"<ol> <li>Message Processing: Record processing time and success/failure</li> <li>ADWIN Algorithm: Update rolling means and drift detection events</li> <li>Order Processing: Track orders per minute and processing success</li> <li>System Health: Monitor uptime and Kafka message rates</li> </ol>"},{"location":"monitoring/#configuration-files","title":"Configuration Files","text":""},{"location":"monitoring/#prometheus-configuration","title":"Prometheus Configuration","text":"<ul> <li>File: <code>infra/prometheus.yml</code></li> <li>Scrape Interval: 10 seconds for SurgeOpt metrics</li> <li>Retention: 200 hours</li> </ul>"},{"location":"monitoring/#grafana-provisioning","title":"Grafana Provisioning","text":"<ul> <li>Datasources: <code>infra/grafana/provisioning/datasources/prometheus.yml</code></li> <li>Dashboards: <code>infra/grafana/provisioning/dashboards/dashboard.yml</code></li> <li>Dashboard JSON: <code>infra/grafana/dashboards/surgeopt-dashboard.json</code></li> </ul>"},{"location":"monitoring/#docker-compose","title":"Docker Compose","text":"<ul> <li>Prometheus: Port 9090, mounted config files</li> <li>Grafana: Port 3000, provisioned datasources and dashboards</li> </ul>"},{"location":"monitoring/#development-and-testing","title":"Development and Testing","text":""},{"location":"monitoring/#running-tests","title":"Running Tests","text":"<pre><code># Run metrics tests\npython -m pytest tests/test_metrics.py -v\n\n# Test metrics endpoint manually\npython quick_metrics_test.py\n</code></pre>"},{"location":"monitoring/#adding-new-metrics","title":"Adding New Metrics","text":"<ol> <li>Add metric definition to <code>src/metrics/exporter.py</code></li> <li>Record metric values in relevant consumer code</li> <li>Update dashboard queries if needed</li> <li>Add alerting rules if appropriate</li> </ol>"},{"location":"monitoring/#example-adding-a-new-counter","title":"Example: Adding a New Counter","text":"<pre><code># In SurgeOptMetrics.__init__()\nself.my_new_counter = Counter(\n    'surgeopt_my_new_metric_total',\n    'Description of my metric',\n    ['label1', 'label2']\n)\n\n# In your consumer code\nmetrics.my_new_counter.labels(label1='value1', label2='value2').inc()\n</code></pre>"},{"location":"monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"monitoring/#common-issues","title":"Common Issues","text":"<ol> <li>Metrics not appearing in Prometheus</li> <li>Check if metrics server is running: <code>curl http://localhost:8000/metrics</code></li> <li> <p>Verify Prometheus configuration and restart if needed</p> </li> <li> <p>Grafana dashboard empty</p> </li> <li>Ensure Prometheus datasource is configured correctly</li> <li> <p>Check that metrics are available in Prometheus UI</p> </li> <li> <p>Alerts not firing</p> </li> <li>Verify alerting rules syntax in Prometheus UI</li> <li>Check that metrics values meet alert conditions</li> </ol>"},{"location":"monitoring/#useful-commands","title":"Useful Commands","text":"<pre><code># Check container status\ndocker compose ps\n\n# View Prometheus logs\ndocker compose logs prometheus\n\n# View Grafana logs\ndocker compose logs grafana\n\n# Test metrics endpoint\ncurl http://localhost:8000/metrics | grep surgeopt\n\n# Query Prometheus API\ncurl \"http://localhost:9090/api/v1/query?query=surgeopt_orders_per_minute\"\n</code></pre>"},{"location":"monitoring/#production-considerations","title":"Production Considerations","text":"<ol> <li>Security: Configure authentication for Grafana and Prometheus</li> <li>Storage: Set up persistent volumes for metrics retention</li> <li>Alerting: Configure Alertmanager for notification routing</li> <li>High Availability: Consider running multiple Prometheus instances</li> <li>Resource Limits: Set appropriate CPU and memory limits for containers</li> </ol>"},{"location":"monitoring/#references","title":"References","text":"<ul> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>Python Prometheus Client</li> </ul>"},{"location":"system-overview/","title":"SurgeOpt System - Complete Beginner's Guide","text":""},{"location":"system-overview/#what-does-this-system-actually-do","title":"\ud83c\udfaf What Does This System Actually Do?","text":"<p>Imagine you're running a food delivery company in Helsinki. Your SurgeOpt system:</p> <ol> <li>Monitors orders coming in from different neighborhoods (Kallio, Kamppi, etc.)</li> <li>Detects changes in demand patterns (concept drift)</li> <li>Tracks performance of your order processing system</li> <li>Shows everything in real-time dashboards</li> <li>Alerts you when something unusual happens</li> </ol>"},{"location":"system-overview/#the-components-simple-analogies","title":"\ud83e\udde9 The Components - Simple Analogies","text":""},{"location":"system-overview/#producer-order-simulator","title":"Producer = Order Simulator \ud83d\udcf1","text":"<pre><code>Like a mobile app that GENERATES fake food orders:\n- \"New order from Kallio: Pizza delivery\"\n- \"New order from Kamppi: Burger delivery\"\n- Sends these to Kafka (message queue)\n</code></pre> <p>Technical: Creates JSON messages and sends them to Kafka topics</p>"},{"location":"system-overview/#kafka-message-highway","title":"Kafka = Message Highway \ud83d\udee3\ufe0f","text":"<pre><code>Like a postal service for your application:\n- Producer puts messages in mailboxes (topics)\n- Consumer picks up messages from mailboxes\n- Ensures messages don't get lost\n</code></pre> <p>Technical: Distributed streaming platform that handles message queues</p>"},{"location":"system-overview/#consumer-order-processor","title":"Consumer = Order Processor \ud83c\udfed","text":"<pre><code>Like a factory worker who:\n- Takes orders from the message queue\n- Processes them (validates, saves to database)\n- Records metrics about processing time\n- Detects if order patterns are changing (ADWIN)\n</code></pre> <p>Technical: Reads Kafka messages, processes them, updates database, records metrics</p>"},{"location":"system-overview/#postgresql-storage-warehouse","title":"PostgreSQL = Storage Warehouse \ud83d\udce6","text":"<pre><code>Like a warehouse that stores:\n- All processed orders\n- Historical data\n- Zone information\n</code></pre> <p>Technical: Relational database for persistent data storage</p>"},{"location":"system-overview/#metrics-server-reporter","title":"Metrics Server = Reporter \ud83d\udcca","text":"<pre><code>Like a journalist who:\n- Watches everything happening\n- Counts orders per minute\n- Measures how fast things are processed\n- Reports numbers to Prometheus\n</code></pre> <p>Technical: HTTP server exposing metrics in Prometheus format</p>"},{"location":"system-overview/#prometheus-data-historian","title":"Prometheus = Data Historian \ud83d\udcda","text":"<pre><code>Like a librarian who:\n- Visits the reporter every 10 seconds\n- Asks: \"How many orders? How fast?\"\n- Writes everything down with timestamps\n- Keeps a detailed history book\n</code></pre> <p>Technical: Time-series database that scrapes and stores metrics</p>"},{"location":"system-overview/#grafana-dashboard-tv","title":"Grafana = Dashboard TV \ud83d\udcfa","text":"<pre><code>Like a smart TV that:\n- Reads the librarian's history book\n- Creates beautiful charts and graphs\n- Updates the display every few seconds\n- Shows trends and patterns\n</code></pre> <p>Technical: Visualization platform that queries Prometheus and displays dashboards</p>"},{"location":"system-overview/#how-to-start-everything-step-by-step","title":"\ud83d\ude80 How to Start Everything - Step by Step","text":""},{"location":"system-overview/#option-1-automatic-startup-recommended","title":"Option 1: Automatic Startup (Recommended)","text":"<pre><code># Start everything at once\n./complete_startup.sh\n\n# This will:\n# 1. Start all Docker services (Kafka, PostgreSQL, Prometheus, Grafana)\n# 2. Start the metrics server with sample data\n# 3. Import Grafana dashboards\n# 4. Give you URLs to access everything\n</code></pre>"},{"location":"system-overview/#option-2-manual-startup-for-learning","title":"Option 2: Manual Startup (For Learning)","text":"<pre><code># Step 1: Start infrastructure\ndocker compose up -d\n\n# Step 2: Start metrics server (generates sample data)\npython start_metrics.py &amp;\n\n# Step 3: (Optional) Start real consumer\npython -m src.consumer.consumer &amp;\n\n# Step 4: (Optional) Start producer to generate orders\npython -m src.simulator.producer &amp;\n</code></pre>"},{"location":"system-overview/#to-stop-everything","title":"To Stop Everything:","text":"<pre><code>./stop_system.sh\n</code></pre>"},{"location":"system-overview/#what-youll-see-when-its-running","title":"\ud83d\udcca What You'll See When It's Running","text":""},{"location":"system-overview/#1-grafana-dashboard-httplocalhost3000","title":"1. Grafana Dashboard (http://localhost:3000)","text":"<ul> <li>Login: admin / admin</li> <li>Shows: Real-time charts of order volumes, processing times</li> <li>Updates: Every 5 seconds automatically</li> </ul>"},{"location":"system-overview/#2-prometheus-httplocalhost9090","title":"2. Prometheus (http://localhost:9090)","text":"<ul> <li>Shows: Raw metrics data and query interface</li> <li>Use for: Debugging metric values, writing custom queries</li> </ul>"},{"location":"system-overview/#3-metrics-endpoint-httplocalhost8000metrics","title":"3. Metrics Endpoint (http://localhost:8000/metrics)","text":"<ul> <li>Shows: Raw metric data in text format</li> <li>Use for: Verifying metrics are being generated</li> </ul>"},{"location":"system-overview/#4-kafdrop-httplocalhost9000","title":"4. Kafdrop (http://localhost:9000)","text":"<ul> <li>Shows: Kafka topics and messages</li> <li>Use for: Seeing order messages flowing through system</li> </ul>"},{"location":"system-overview/#the-complete-data-flow","title":"\ud83d\udd04 The Complete Data Flow","text":"<p>Here's exactly what happens when you start everything:</p> <pre><code>1. Producer creates fake orders \u2192 Kafka\n2. Consumer reads orders from Kafka \u2192 PostgreSQL\n3. Consumer records metrics \u2192 Metrics Server\n4. Prometheus scrapes metrics \u2192 Time-series database\n5. Grafana queries Prometheus \u2192 Beautiful dashboards\n6. You see real-time charts in your browser\n</code></pre>"},{"location":"system-overview/#different-running-modes","title":"\ud83c\udf9b\ufe0f Different Running Modes","text":""},{"location":"system-overview/#mode-1-monitoring-only-current","title":"Mode 1: Monitoring Only (Current)","text":"<pre><code>./complete_startup.sh\n# Only metrics server runs (generates fake data)\n# Perfect for learning Prometheus/Grafana\n</code></pre>"},{"location":"system-overview/#mode-2-full-simulation","title":"Mode 2: Full Simulation","text":"<pre><code>./complete_startup.sh\npython -m src.simulator.producer &amp;    # Generates orders\npython -m src.consumer.consumer &amp;     # Processes orders\n# Full end-to-end order processing\n</code></pre>"},{"location":"system-overview/#mode-3-production-ready","title":"Mode 3: Production Ready","text":"<pre><code># Replace producer with real order source\n# Consumer processes real orders\n# Monitoring tracks real business metrics\n</code></pre>"},{"location":"system-overview/#what-each-monitoring-tool-shows-you","title":"\ud83d\udd27 What Each Monitoring Tool Shows You","text":""},{"location":"system-overview/#prometheus-metrics-examples","title":"Prometheus Metrics Examples:","text":"<pre><code># Current orders per minute in each zone\nsurgeopt_orders_per_minute\n\n# Total orders processed (success/failure)\nsurgeopt_orders_processed_total\n\n# How long processing takes\nsurgeopt_consumer_processing_seconds\n\n# ADWIN drift detection events\nsurgeopt_adwin_drift_detected_total\n</code></pre>"},{"location":"system-overview/#grafana-dashboard-panels","title":"Grafana Dashboard Panels:","text":"<ol> <li>Orders Per Minute by Zone - Line chart showing order volume</li> <li>Processing Rate - Gauge showing total throughput</li> <li>Latency - Response time percentiles</li> <li>ADWIN Mean - Algorithm state visualization</li> </ol>"},{"location":"system-overview/#business-value","title":"\ud83d\udcc8 Business Value","text":"<p>This monitoring helps you:</p> <ol> <li>Track Business KPIs - Orders per minute, success rates</li> <li>Detect Problems - High latency, system failures</li> <li>Spot Trends - Demand changes, seasonal patterns</li> <li>Optimize Operations - Identify bottlenecks</li> <li>Prevent Issues - Alerts before customers notice</li> </ol>"},{"location":"system-overview/#quick-start-commands","title":"\ud83c\udfaf Quick Start Commands","text":"<pre><code># Start everything\n./complete_startup.sh\n\n# Check if working\ncurl http://localhost:8000/metrics\n\n# Open dashboards\nopen http://localhost:3000/d/surgeopt-main/surgeopt-monitoring-dashboard\n\n# Stop everything\n./stop_system.sh\n</code></pre>"},{"location":"system-overview/#faq-for-beginners","title":"\ud83e\udd14 FAQ for Beginners","text":"<p>Q: Do I need to start consumer and producer? A: No! The metrics server generates sample data automatically. Consumer/producer are optional for full simulation.</p> <p>Q: What if I see \"No data\" in Grafana? A: Check that metrics server is running: <code>curl http://localhost:8000/metrics</code></p> <p>Q: How do I know if Prometheus is working? A: Visit http://localhost:9090 and search for <code>surgeopt_orders_per_minute</code></p> <p>Q: Can I modify the metrics? A: Yes! Edit <code>src/metrics/exporter.py</code> to add new metrics</p> <p>Q: What's the difference between Prometheus and Grafana? A: Prometheus = Data storage, Grafana = Data visualization</p> <p>Your monitoring system is now ready to show you real-time insights into your SurgeOpt application! \ud83c\udf89</p>"},{"location":"usage/","title":"API Usage","text":""},{"location":"usage/#next_bonus","title":"<code>/next_bonus</code>","text":""},{"location":"usage/#method-post","title":"Method: <code>POST</code>","text":"<p>Returns the \u20ac/km uplift matrix for the next 15 minutes.</p> <p>Request:</p> <pre><code>{\n  \"timestamp\": \"2024-06-01T14:00:00Z\",\n  \"area_ids\": [\"area_123\", \"area_456\"]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"matrix\": {\n    \"area_123\": 0.15,\n    \"area_456\": 0.25\n  },\n  \"explanation\": \"High lunch demand in downtown. ADWIN and forecast agree on uplift.\"\n}\n</code></pre>"},{"location":"usage/#health","title":"<code>/health</code>","text":"<p>Simple health check endpoint.</p>"},{"location":"usage/#slack-bot","title":"Slack Bot","text":"<p>When a bonus uplift is published, a Slack message is posted to the configured webhook:</p> <pre><code>\ud83d\udcc8 Bonus updated: Downtown +0.25 \u20ac/km for next 15 minutes.\n\ud83d\udcca Reason: Spike detected via ADWIN + forecast confirms demand.\n</code></pre>"}]}